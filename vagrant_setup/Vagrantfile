Vagrant.configure("2") do |config|

    config.vm.synced_folder "C:\\DevOps\\scripts\\bash_scripts", "/opt/scripts"
  
    # Configure the nexus VM
    config.vm.define "nexus" do |nexus|
      # nexus.vm.box = "geerlingguy/centos7"
      nexus.vm.box = "ubuntu/bionic64"
      nexus.vm.network "private_network", ip: "192.168.10.14"
        
      nexus.vm.provider "virtualbox" do |vb|
        vb.memory = "2048"
      end

      # Provision Nexus on the nexus VM
      # nexus.vm.provision "shell", inline: <<-SHELL
        #!/bin/bash

        # Exit on any error
      #   set -e

      #   # Variables
      #   NEXUS_VERSION="3.57.0-01"  # Update with the latest version if needed
      #   NEXUS_USER="nexus"
      #   INSTALL_DIR="/opt/nexus"
      #   DATA_DIR="/opt/sonatype-work"
      #   DOWNLOAD_URL="https://download.sonatype.com/nexus/3/nexus-${NEXUS_VERSION}-unix.tar.gz"
      #   JAVA_PACKAGE="openjdk-17-jdk"

      #   # Update system and install Java
      #   echo "Updating system and installing Java..."
      #   sudo apt update && sudo apt upgrade -y
      #   sudo apt install -y $JAVA_PACKAGE wget

      #   # Create Nexus user if not exists
      #   if ! id -u $NEXUS_USER > /dev/null 2>&1; then
      #     echo "Creating Nexus user..."
      #     sudo useradd -r -m -d $INSTALL_DIR -s /bin/bash $NEXUS_USER
      #   fi

      #   # Download and extract Nexus
      #   echo "Downloading and installing Nexus..."
      #   if [ ! -d "$INSTALL_DIR" ]; then
      #     sudo mkdir -p $INSTALL_DIR
      #   fi
      #   if [ ! -d "$DATA_DIR" ]; then
      #     sudo mkdir -p $DATA_DIR
      #   fi
      #   wget $DOWNLOAD_URL -O /tmp/nexus.tar.gz
      #   if [ $? -eq 0 ]; then
      #     sudo tar -xzf /tmp/nexus.tar.gz -C /opt
      #     sudo mv /opt/nexus-${NEXUS_VERSION}/* $INSTALL_DIR/
      #     sudo chown -R $NEXUS_USER:$NEXUS_USER $INSTALL_DIR $DATA_DIR
      #   else
      #     echo "Failed to download Nexus. Exiting."
      #     exit 1
      #   fi

      #   # Configure Nexus to run as a service
      #   echo "Configuring Nexus service..."
      #   sudo bash -c "cat > /etc/systemd/system/nexus.service <<-EOF
      #   [Unit]
      #   Description=Nexus Repository Manager
      #   After=network.target

      #   [Service]
      #   Type=forking
      #   LimitNOFILE=65536
      #   Environment='INSTALL4J_JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64'
      #   ExecStart=${INSTALL_DIR}/bin/nexus start
      #   ExecStop=${INSTALL_DIR}/bin/nexus stop
      #   User=${NEXUS_USER}
      #   Restart=on-failure

      #   [Install]
      #   WantedBy=multi-user.target
      #   EOF"

      #   # Enable and start the Nexus service
      #   echo "Enabling and starting Nexus service..."
      #   sudo systemctl daemon-reload
      #   sudo systemctl enable nexus.service
      #   sudo systemctl start nexus.service

      #   # Check Nexus service status
      #   echo "Checking Nexus service status..."
      #   sudo systemctl status nexus.service

      #   # Verify Nexus is running
      #   echo "Verifying Nexus is accessible..."
      #   sleep 10  # Wait for Nexus to fully start
      #   if curl -s http://localhost:8081 | grep "Nexus Repository Manager" > /dev/null; then
      #     echo "Nexus Repository Manager installed successfully!"
      #     echo "Access Nexus at http://<your-server-ip>:8081"
      #   else
      #     echo "Nexus service failed to start. Check the logs."
      #     sudo journalctl -u nexus.service
      #   fi
      # SHELL
    end
    
    # Configure the sonarqube VM
    config.vm.define "sonarqube" do |sonarqube|
      sonarqube.vm.box = "ubuntu/bionic64"
      sonarqube.vm.network "private_network", ip: "192.168.10.15"
        
      sonarqube.vm.provider "virtualbox" do |vb|
        vb.memory = "2048"
      end
    end
    
    # # Configure the jenkins VM
    config.vm.define "jenkins" do |jenkins|
      jenkins.vm.box = "ubuntu/focal64"
      jenkins.vm.network "private_network", ip: "192.168.10.16"
      jenkins.vm.provider "virtualbox" do |vb|
        vb.memory = "2048"
      end
  
      # Provision Jenkins on the jenkins VM
      jenkins.vm.provision "shell", inline: <<-SHELL
        #!/bin/bash
        sudo apt update
        sudo apt install -y fontconfig openjdk-17-jre maven
        sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
        https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
        echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/" | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y jenkins
      SHELL
    end
  end
  